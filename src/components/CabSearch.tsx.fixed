import React, { useState, useEffect, useCallback, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Loader2, MapPin, Clock, Car, Navigation, ArrowRight, Calendar as CalendarIcon, LocateFixed } from 'lucide-react';
import { GoogleMap, LoadScript, Marker, DirectionsRenderer, InfoWindow } from "@react-google-maps/api";
import { cn } from "@/lib/utils";
import { format, addMinutes } from "date-fns";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";
import { Cab as BookingCab } from "@/types/booking";

// Define the Cab interface with all required properties
interface Cab extends Omit<BookingCab, 'coordinates'> {
  position: {
    lat: number;
    lng: number;
  };
  driver: string;
  rating: string;
  estimatedTime: string;
  distance: string;
  driverName: string;
  vehicleNumber: string;
  type: string;
  price: number;
  image: string;
  pickupLocation: string;
  dropoffLocation: string;
  pickupTime: Date;
  coordinates: {
    pickup: { lat: number; lng: number };
    dropoff: { lat: number; lng: number };
  };
}

const mapContainerStyle: React.CSSProperties = {
  width: '100%',
  height: '400px',
  borderRadius: '0.5rem',
};

const defaultCenter = {
  lat: 28.6139, // Default to New Delhi
  lng: 77.2090
};

const cabTypes = [
  { id: 'economy', name: 'Economy', price: 10, icon: 'üöó' },
  { id: 'sedan', name: 'Sedan', price: 15, icon: 'üöô' },
  { id: 'suv', name: 'SUV', price: 25, icon: 'üöô' },
  { id: 'premium', name: 'Premium', price: 35, icon: 'üöò' },
];

const generateMockCabLocations = (count: number, center: { lat: number; lng: number }): Cab[] => {
  return Array.from({ length: count }, (_, i) => ({
    id: `cab-${i}`,
    type: ['Sedan', 'SUV', 'Premium', 'Economy'][Math.floor(Math.random() * 4)],
    price: Math.floor(Math.random() * 500) + 300,
    estimatedTime: `${Math.floor(Math.random() * 15) + 5} min`,
    distance: `${Math.floor(Math.random() * 10) + 1} km`,
    position: {
      lat: center.lat + (Math.random() - 0.5) * 0.1,
      lng: center.lng + (Math.random() - 0.5) * 0.1,
    },
    driver: `Driver ${String.fromCharCode(65 + i)}`,
    driverName: `Driver ${String.fromCharCode(65 + i)}`,
    vehicleNumber: `DL ${Math.floor(1000 + Math.random() * 9000)} ${String.fromCharCode(65 + Math.floor(Math.random() * 26))}${String.fromCharCode(65 + Math.floor(Math.random() * 26))}`,
    rating: (Math.random() * 1 + 4).toFixed(1),
    image: `https://via.placeholder.com/100?text=Cab+${i + 1}`,
    pickupLocation: 'Current Location',
    dropoffLocation: 'Destination',
    pickupTime: new Date(),
    coordinates: {
      pickup: { lat: center.lat, lng: center.lng },
      dropoff: { lat: center.lat + 0.1, lng: center.lng + 0.1 }
    }
  }));
};

interface MapWithCabsProps {
  center: {
    lat: number;
    lng: number;
  };
  pickupLocation: string;
  dropoffLocation: string;
  cabs: Cab[];
  selectedCab: Cab | null;
  onCabSelect: (cab: Cab) => void;
}

const MapWithCabs: React.FC<MapWithCabsProps> = ({
  center,
  pickupLocation,
  dropoffLocation,
  onCabSelect,
  selectedCab: initialSelectedCab = null,
  cabs: initialCabs = []
}) => {
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null);
  const [selectedCab, setSelectedCab] = useState<Cab | null>(initialSelectedCab);
  const [loading, setLoading] = useState(true);
  const [cabs, setCabs] = useState<Cab[]>(initialCabs);
  const mapRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const directionsService = useRef<google.maps.DirectionsService | null>(null);

  const onLoad = useCallback((mapInstance: google.maps.Map) => {
    setMap(mapInstance);
    
    // Add click listener to close info window when clicking on the map
    const clickListener = mapInstance.addListener("click", () => {
      setSelectedCab(null);
    });
    
    // Set a timeout to ensure the map is fully loaded
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1000);
    
    // Cleanup function
    return () => {
      if (clickListener) {
        google.maps.event.removeListener(clickListener);
      }
      clearTimeout(timer);
    };
  }, []);

  const onUnmount = useCallback(() => {
    setMap(null);
  }, []);

  const handleMarkerClick = useCallback((cab: Cab) => {
    setSelectedCab(cab);
    onCabSelect(cab);
  }, [onCabSelect]);

  const getCabImage = useCallback((type: string): string => {
    switch (type.toLowerCase()) {
      case 'suv':
        return 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
      case 'premium':
        return 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
      case 'economy':
        return 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
      default:
        return 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png';
    }
  }, []);

  useEffect(() => {
    if (!loading && map) {
      // Generate mock cabs around the center
      const mockCabs = generateMockCabLocations(10, center);
      setCabs(mockCabs);
    }
  }, [loading, map, center]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="relative h-full" ref={mapRef}>
      <GoogleMap
        mapContainerStyle={mapContainerStyle}
        center={center}
        zoom={13}
        onLoad={(map: google.maps.Map) => onLoad(map)}
        onUnmount={onUnmount}
        options={{
          disableDefaultUI: true,
          zoomControl: true,
        }}
      >
        {/* Pickup Marker */}
        <Marker
          position={center}
          icon={{
            url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
            scaledSize: new window.google.maps.Size(32, 32),
          }}
        />

        {/* Cabs */}
        {cabs.map((cab) => (
          <Marker
            key={cab.id}
            position={cab.position}
            onClick={() => handleMarkerClick(cab)}
            icon={{
              url: getCabImage(cab.type),
              scaledSize: new window.google.maps.Size(32, 32),
            }}
          />
        ))}

        {/* Selected Cab Info Window */}
        {selectedCab && (
          <InfoWindow
            position={selectedCab.position}
            onCloseClick={() => setSelectedCab(null)}
          >
            <div className="p-2">
              <h3 className="font-bold">{selectedCab.type} Cab</h3>
              <p>Driver: {selectedCab.driverName}</p>
              <p>Vehicle: {selectedCab.vehicleNumber}</p>
              <p>Rating: {selectedCab.rating} ‚≠ê</p>
              <p>Price: ‚Çπ{selectedCab.price}</p>
              <p>ETA: {selectedCab.estimatedTime}</p>
            </div>
          </InfoWindow>
        )}

        {/* Directions */}
        {directions && <DirectionsRenderer directions={directions} />}
      </GoogleMap>
    </div>
  );
};

export const CabSearch: React.FC = () => {
  const [pickupLocation, setPickupLocation] = useState('');
  const [dropoffLocation, setDropoffLocation] = useState('');
  const [pickupTime, setPickupTime] = useState<Date>(new Date());
  const [cabType, setCabType] = useState('economy');
  const [selectedCab, setSelectedCab] = useState<Cab | null>(null);
  const [loading, setLoading] = useState(false);
  const [cabs, setCabs] = useState<Cab[]>([]);
  const { toast } = useToast();

  const handleSearch = useCallback(() => {
    if (!pickupLocation || !dropoffLocation) {
      toast({
        title: "Error",
        description: "Please enter both pickup and dropoff locations",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    // Simulate API call
    setTimeout(() => {
      const mockCabs = generateMockCabLocations(10, defaultCenter);
      setCabs(mockCabs);
      setLoading(false);
    }, 1000);
  }, [pickupLocation, dropoffLocation, toast]);

  const handleCabSelect = useCallback((cab: Cab) => {
    setSelectedCab(cab);
  }, []);

  return (
    <div className="container mx-auto p-4">
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Book a Cab</CardTitle>
          <CardDescription>Find and book your ride</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Pickup Location</label>
              <div className="relative">
                <Input
                  placeholder="Enter pickup location"
                  value={pickupLocation}
                  onChange={(e) => setPickupLocation(e.target.value)}
                />
                <LocateFixed className="absolute right-3 top-2.5 h-4 w-4 text-muted-foreground" />
              </div>
            </div>
            <div>
              <label className="text-sm font-medium mb-1 block">Dropoff Location</label>
              <div className="relative">
                <Input
                  placeholder="Enter dropoff location"
                  value={dropoffLocation}
                  onChange={(e) => setDropoffLocation(e.target.value)}
                />
                <MapPin className="absolute right-3 top-2.5 h-4 w-4 text-muted-foreground" />
              </div>
            </div>
            <div>
              <label className="text-sm font-medium mb-1 block">Pickup Time</label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !pickupTime && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {pickupTime ? format(pickupTime, "PPPp") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={pickupTime}
                    onSelect={(date) => date && setPickupTime(date)}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div>
              <label className="text-sm font-medium mb-1 block">Cab Type</label>
              <Select value={cabType} onValueChange={setCabType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select cab type" />
                </SelectTrigger>
                <SelectContent>
                  {cabTypes.map((type) => (
                    <SelectItem key={type.id} value={type.id}>
                      <div className="flex items-center">
                        <span className="mr-2">{type.icon}</span>
                        <span>{type.name}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <Button className="w-full" onClick={handleSearch} disabled={loading}>
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Searching...
              </>
            ) : (
              'Search Cabs'
            )}
          </Button>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <MapWithCabs
            center={defaultCenter}
            pickupLocation={pickupLocation || 'Current Location'}
            dropoffLocation={dropoffLocation || 'Destination'}
            cabs={cabs}
            selectedCab={selectedCab}
            onCabSelect={handleCabSelect}
          />
        </div>
        <div>
          {selectedCab ? (
            <Card>
              <CardHeader>
                <CardTitle>Cab Details</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center">
                    <Car className="h-6 w-6 mr-2 text-primary" />
                    <div>
                      <p className="font-medium">{selectedCab.type} Cab</p>
                      <p className="text-sm text-muted-foreground">{selectedCab.vehicleNumber}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <Clock className="h-5 w-5 mr-2 text-muted-foreground" />
                    <span>ETA: {selectedCab.estimatedTime}</span>
                  </div>
                  <div className="flex items-center">
                    <MapPin className="h-5 w-5 mr-2 text-muted-foreground" />
                    <span>Distance: {selectedCab.distance}</span>
                  </div>
                  <div className="pt-4 border-t">
                    <p className="text-2xl font-bold">‚Çπ{selectedCab.price}</p>
                    <p className="text-sm text-muted-foreground">Total Fare</p>
                  </div>
                  <Button className="w-full mt-4">Book Now</Button>
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardHeader>
                <CardTitle>Select a Cab</CardTitle>
                <CardDescription>Click on a cab on the map to see details</CardDescription>
              </CardHeader>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default CabSearch;
