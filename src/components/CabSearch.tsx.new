import React, { useState, useEffect, useCallback, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Loader2, MapPin, Clock, Car, Navigation, ArrowRight, Calendar as CalendarIcon, LocateFixed } from 'lucide-react';
import { GoogleMap, LoadScript, Marker, DirectionsRenderer, InfoWindow } from "@react-google-maps/api";
import { cn } from "@/lib/utils";
import { format, addMinutes } from "date-fns";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/components/ui/use-toast";
import { Cab as BookingCab } from "@/types/booking";

// Define the Cab interface with all required properties
interface Cab extends Omit<BookingCab, 'coordinates'> {
  position: {
    lat: number;
    lng: number;
  };
  driver: string;
  rating: string;
  estimatedTime: string;
  distance: string;
  driverName: string;
  vehicleNumber: string;
  type: string;
  price: number;
  image: string;
  pickupLocation: string;
  dropoffLocation: string;
  pickupTime: Date;
  coordinates: {
    pickup: { lat: number; lng: number };
    dropoff: { lat: number; lng: number };
  };
}

const mapContainerStyle: React.CSSProperties = {
  width: '100%',
  height: '400px',
  borderRadius: '0.5rem',
};

const defaultCenter = {
  lat: 28.6139, // Default to New Delhi
  lng: 77.2090
};

const cabTypes = [
  { id: 'economy', name: 'Economy', price: 10, icon: 'ðŸš—' },
  { id: 'sedan', name: 'Sedan', price: 15, icon: 'ðŸš™' },
  { id: 'suv', name: 'SUV', price: 25, icon: 'ðŸš™' },
  { id: 'premium', name: 'Premium', price: 35, icon: 'ðŸš˜' },
];

const generateMockCabLocations = (count: number, center: { lat: number; lng: number }): Cab[] => {
  return Array.from({ length: count }, (_, i) => ({
    id: `cab-${i}`,
    type: ['Sedan', 'SUV', 'Premium', 'Economy'][Math.floor(Math.random() * 4)],
    price: Math.floor(Math.random() * 500) + 300,
    estimatedTime: `${Math.floor(Math.random() * 15) + 5} min`,
    distance: `${Math.floor(Math.random() * 10) + 1} km`,
    position: {
      lat: center.lat + (Math.random() - 0.5) * 0.1,
      lng: center.lng + (Math.random() - 0.5) * 0.1,
    },
    driver: `Driver ${String.fromCharCode(65 + i)}`,
    driverName: `Driver ${String.fromCharCode(65 + i)}`,
    vehicleNumber: `DL ${Math.floor(1000 + Math.random() * 9000)} ${String.fromCharCode(65 + Math.floor(Math.random() * 26))}${String.fromCharCode(65 + Math.floor(Math.random() * 26))}`,
    rating: (Math.random() * 1 + 4).toFixed(1),
    image: `https://via.placeholder.com/100?text=Cab+${i + 1}`,
    pickupLocation: 'Current Location',
    dropoffLocation: 'Destination',
    pickupTime: new Date(),
    coordinates: {
      pickup: { lat: center.lat, lng: center.lng },
      dropoff: { lat: center.lat + 0.1, lng: center.lng + 0.1 }
    }
  }));
};

interface MapWithCabsProps {
  center: {
    lat: number;
    lng: number;
  };
  pickupLocation: string;
  dropoffLocation: string;
  cabs: Cab[];
  selectedCab: Cab | null;
  onCabSelect: (cab: Cab) => void;
}

const MapWithCabs: React.FC<MapWithCabsProps> = ({
  center,
  pickupLocation,
  dropoffLocation,
  onCabSelect,
  selectedCab: initialSelectedCab = null,
  cabs: initialCabs = []
}) => {
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null);
  const [selectedCab, setSelectedCab] = useState<Cab | null>(initialSelectedCab);
  const [loading, setLoading] = useState(true);
  const mapRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const directionsService = useRef<google.maps.DirectionsService | null>(null);
  const [cabs, setCabs] = useState<Cab[]>(initialCabs);

  const onLoad = useCallback((mapInstance: google.maps.Map) => {
    setMap(mapInstance);
    
    // Add click listener to close info window when clicking on the map
    const clickListener = mapInstance.addListener("click", () => {
      setSelectedCab(null);
    });
    
    // Set a timeout to ensure the map is fully loaded
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1000);
    
    // Cleanup function
    return () => {
      if (clickListener) {
        google.maps.event.removeListener(clickListener);
      }
      clearTimeout(timer);
    };
  }, [setMap, setLoading]);
  
  const onUnmount = useCallback(() => {
    setMap(null);
  }, []);
