// Flight details component
const FlightDetails: React.FC<{ flight: Flight }> = ({ flight }) => {
  const getDuration = () => {
    const durationMs = flight.arrivalTime.getTime() - flight.departureTime.getTime();
    const hours = Math.floor(durationMs / (1000 * 60 * 60));
    const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}h ${minutes}m`;
  };
  
  const getStatusColor = () => {
    switch (flight.status) {
      case 'On Time': return 'bg-green-500';
      case 'Delayed': return 'bg-red-500';
      case 'Boarding': return 'bg-blue-500';
      case 'In Air': return 'bg-airblue';
      case 'Landed': return 'bg-green-700';
      case 'Cancelled': return 'bg-gray-500';
      default: return 'bg-gray-500';
    }
  };
  
  return (
    <Card className="mb-4">
      <CardContent className="p-6">
        <div className="flex flex-col md:flex-row justify-between mb-6">
          <div className="mb-4 md:mb-0">
            <div className="text-2xl font-bold mb-1">{flight.flightNumber}</div>
            <div className="text-sm text-gray-500">{flight.airline} â€¢ {flight.aircraft}</div>
          </div>
          <div className="flex items-center">
            <span className={`w-3 h-3 rounded-full ${getStatusColor()} mr-2`}></span>
            <span className="text-sm font-medium">{flight.status}</span>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="text-sm text-gray-500 mb-1">Departure</div>
            <div className="text-lg font-semibold">{flight.departureAirport.code}</div>
            <div className="text-xs text-gray-500">{flight.departureAirport.name}</div>
            <div className="text-sm mt-1">
              {flight.departureTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
            <div className="text-xs text-gray-500">
              {flight.departureTime.toLocaleDateString([], { day: 'numeric', month: 'short', year: 'numeric' })}
            </div>
          </div>
          
          <div className="flex flex-col items-center justify-center">
            <div className="text-xs text-gray-500 mb-2">{getDuration()}</div>
            <div className="relative w-full flex items-center justify-center">
              <div className="absolute w-full border-t border-gray-300"></div>
              <div className="absolute w-full flex justify-between px-2">
                <div className="h-2 w-2 rounded-full bg-gray-500 -mt-1 bg-airblue"></div>
                <div className="h-2 w-2 rounded-full bg-gray-500 -mt-1 bg-airblue"></div>
              </div>
              <Plane className="z-10 text-airblue rotate-90 transform" size={24} />
            </div>
            <div className="text-xs text-gray-500 mt-2 text-center">
              {flight.currentPosition ? (
                <>
                  <div>Altitude: {flight.currentPosition.altitude} ft</div>
                  <div>Speed: {flight.currentPosition.speed} km/h</div>
                </>
              ) : (
                "Not in air"
              )}
            </div>
          </div>
          
          <div className="text-center">
            <div className="text-sm text-gray-500 mb-1">Arrival</div>
            <div className="text-lg font-semibold">{flight.arrivalAirport.code}</div>
            <div className="text-xs text-gray-500">{flight.arrivalAirport.name}</div>
            <div className="text-sm mt-1">
              {flight.arrivalTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
            <div className="text-xs text-gray-500">
              {flight.arrivalTime.toLocaleDateString([], { day: 'numeric', month: 'short', year: 'numeric' })}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Map component for flight tracking
const FlightMap: React.FC<{ flight: Flight }> = ({ flight }) => {
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [selectedAirport, setSelectedAirport] = useState<Airport | null>(null);
  
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: GOOGLE_MAPS_API_KEY,
    libraries,
  });
  
  const onMapLoad = useCallback((mapInstance: google.maps.Map) => {
    setMap(mapInstance);
    
    // Fit bounds to include departure and arrival airports
    const bounds = new window.google.maps.LatLngBounds();
    bounds.extend(flight.departureAirport.coordinates);
    bounds.extend(flight.arrivalAirport.coordinates);
    
    // Add flight path points to bounds
    flight.route.forEach(point => {
      bounds.extend(point);
    });
    
    mapInstance.fitBounds(bounds, 50); // 50px padding
  }, [flight]);
  
  const getAirportIcon = (airport: Airport) => {
    return {
      url: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png",
      scaledSize: new window.google.maps.Size(32, 32),
    };
  };
  
  const getPlaneIcon = () => {
    // In a real implementation, we would use a custom plane icon that rotates according to heading
    return {
      url: "https://maps.google.com/mapfiles/ms/icons/plane.png",
      scaledSize: new window.google.maps.Size(32, 32),
    };
  };
  
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center h-[400px] bg-gray-50 rounded-lg">
        <Loader2 className="h-10 w-10 animate-spin text-airblue" />
      </div>
    );
  }
  
  return (
    <div className="h-[400px] w-full rounded-lg overflow-hidden">
      <GoogleMap
        mapContainerStyle={mapContainerStyle}
        zoom={5}
        onLoad={onMapLoad}
      >
        {/* Departure Airport Marker */}
        <Marker
          position={flight.departureAirport.coordinates}
          icon={getAirportIcon(flight.departureAirport)}
          title={`${flight.departureAirport.name} (${flight.departureAirport.code})`}
          onClick={() => setSelectedAirport(flight.departureAirport)}
        />
        
        {/* Arrival Airport Marker */}
        <Marker
          position={flight.arrivalAirport.coordinates}
          icon={getAirportIcon(flight.arrivalAirport)}
          title={`${flight.arrivalAirport.name} (${flight.arrivalAirport.code})`}
          onClick={() => setSelectedAirport(flight.arrivalAirport)}
        />
        
        {/* Flight path */}
        <Polyline
          path={flight.route}
          options={{
            strokeColor: '#3b82f6',
            strokeWeight: 3,
            strokeOpacity: 0.7,
            geodesic: true,
          }}
        />
        
        {/* Plane marker (current position) */}
        {flight.currentPosition && (
          <Marker
            position={flight.currentPosition}
            icon={getPlaneIcon()}
            title={`${flight.flightNumber} - ${flight.airline}`}
          />
        )}
        
        {/* Info Window for selected airport */}
        {selectedAirport && (
          <InfoWindow
            position={selectedAirport.coordinates}
            onCloseClick={() => setSelectedAirport(null)}
          >
            <div className="p-2">
              <h3 className="font-semibold text-base">{selectedAirport.name}</h3>
              <p className="text-xs text-gray-600">{selectedAirport.city}, {selectedAirport.country}</p>
              <p className="text-xs font-bold mt-1">{selectedAirport.code}</p>
            </div>
          </InfoWindow>
        )}
      </GoogleMap>
    </div>
  );
};

// Main Flight Tracker component
const FlightTracker: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFlight, setSelectedFlight] = useState<Flight | null>(null);
  const [flights, setFlights] = useState<Flight[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("map");
  const { toast } = useToast();
  
  // Initialize flights
  useEffect(() => {
    setFlights(generateMockFlights());
  }, []);
  
  // Handle searching for flights
  const handleSearch = useCallback(() => {
    if (!searchQuery) {
      toast({
        title: "Please enter a search query",
        description: "Enter a flight number, route, or airport code",
        variant: "destructive",
      });
      return;
    }
    
    setLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      const mockFlights = generateMockFlights();
      
      // Filter flights based on search query (case insensitive)
      const query = searchQuery.toLowerCase();
      const filteredFlights = mockFlights.filter(flight => 
        flight.flightNumber.toLowerCase().includes(query) ||
        flight.airline.toLowerCase().includes(query) ||
        flight.departureAirport.code.toLowerCase().includes(query) ||
        flight.arrivalAirport.code.toLowerCase().includes(query) ||
        flight.departureAirport.city.toLowerCase().includes(query) ||
        flight.arrivalAirport.city.toLowerCase().includes(query)
      );
      
      setFlights(filteredFlights);
      setLoading(false);
      
      toast({
        title: filteredFlights.length > 0 
          ? `Found ${filteredFlights.length} flights` 
          : "No flights found",
        description: filteredFlights.length > 0 
          ? "Select a flight to see details" 
          : "Try a different search term",
        variant: filteredFlights.length > 0 ? "default" : "destructive",
      });
    }, 1000);
  }, [searchQuery, toast]);
  
  // Update flight positions in real-time for a more realistic experience
  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;
    
    // Only update if we have flights with "In Air" status
    if (flights.some(flight => flight.status === "In Air")) {
      interval = setInterval(() => {
        setFlights(prevFlights => 
          prevFlights.map(flight => {
            if (flight.status !== "In Air" || !flight.currentPosition) {
              return flight;
            }
            
            // Find next point in route
            const currentIndex = flight.route.findIndex(point => 
              point.lat === flight.currentPosition?.lat && 
              point.lng === flight.currentPosition?.lng
            );
            
            if (currentIndex === -1 || currentIndex === flight.route.length - 1) {
              return flight;
            }
            
            // Move to next point in route
            const nextPoint = flight.route[currentIndex + 1];
            
            return {
              ...flight,
              currentPosition: {
                ...flight.currentPosition,
                lat: nextPoint.lat,
                lng: nextPoint.lng,
              }
            };
          })
        );
      }, 5000); // Update every 5 seconds
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [flights]);
  
  return (
    <div className="container mx-auto p-4">
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Flight Tracker</CardTitle>
          <CardDescription>Track flights in real-time and view price trends</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-grow">
              <Input
                placeholder="Search by flight number, airline, or airport code..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full"
              />
            </div>
            <Button 
              onClick={handleSearch} 
              className="bg-airblue hover:bg-airblue/90"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Searching...
                </>
              ) : (
                <>
                  <Plane className="mr-2 h-4 w-4" />
                  Search Flights
                </>
              )}
            </Button>
          </div>
          
          {/* Flight List */}
          {loading ? (
            <div className="flex items-center justify-center h-40 mt-4">
              <Loader2 className="h-10 w-10 animate-spin text-airblue" />
            </div>
          ) : (
            <div className="mt-6">
              {flights.length > 0 ? (
                <div className="space-y-4">
                  {flights.map(flight => (
                    <Card 
                      key={flight.id} 
                      className={`hover:border-airblue cursor-pointer transition-colors ${selectedFlight?.id === flight.id ? 'border-airblue' : ''}`}
                      onClick={() => setSelectedFlight(flight)}
                    >
                      <CardContent className="p-4">
                        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                          <div className="flex items-center mb-2 md:mb-0">
                            <div className="mr-4">
                              <div className="text-base font-bold">{flight.flightNumber}</div>
                              <div className="text-xs text-gray-500">{flight.airline}</div>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-3 gap-4 flex-grow max-w-2xl">
                            <div className="text-left">
                              <div className="text-sm font-semibold">{flight.departureAirport.code}</div>
                              <div className="text-xs text-gray-500">{flight.departureAirport.city}</div>
                              <div className="text-xs">
                                {flight.departureTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                              </div>
                            </div>
                            
                            <div className="flex flex-col items-center justify-center">
                              <div className="relative w-full flex items-center">
                                <div className="absolute w-full border-t border-gray-300"></div>
                                <div className="absolute w-full flex justify-between">
                                  <div className="h-2 w-2 rounded-full bg-airblue -mt-1"></div>
                                  <div className="h-2 w-2 rounded-full bg-airblue -mt-1"></div>
                                </div>
                                <div className="z-10 bg-white px-2 text-xs text-gray-500">
                                  {Math.round((flight.arrivalTime.getTime() - flight.departureTime.getTime()) / (1000 * 60 * 60))}h
                                </div>
                              </div>
                              <div className="text-xs mt-1 text-gray-500">
                                <span className={`inline-block w-2 h-2 rounded-full mr-1 ${
                                  flight.status === 'On Time' ? 'bg-green-500' : 
                                  flight.status === 'Delayed' ? 'bg-red-500' : 
                                  flight.status === 'In Air' ? 'bg-airblue' : 
                                  flight.status === 'Boarding' ? 'bg-blue-500' : 
                                  flight.status === 'Landed' ? 'bg-green-700' : 'bg-gray-500'
                                }`}></span>
                                {flight.status}
                              </div>
                            </div>
                            
                            <div className="text-right">
                              <div className="text-sm font-semibold">{flight.arrivalAirport.code}</div>
                              <div className="text-xs text-gray-500">{flight.arrivalAirport.city}</div>
                              <div className="text-xs">
                                {flight.arrivalTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-40">
                  <Plane className="h-10 w-10 text-gray-300 mb-2" />
                  <p className="text-gray-500">No flights found. Try a different search term.</p>
                </div>
              )}
            </div>
          )}
          
          {/* Selected Flight Details */}
          {selectedFlight && (
            <div className="mt-8">
              <Tabs defaultValue="map" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="map">Live Map</TabsTrigger>
                  <TabsTrigger value="details">Flight Details</TabsTrigger>
                  <TabsTrigger value="price">Price Trends</TabsTrigger>
                </TabsList>
                
                <TabsContent value="map" className="mt-4">
                  <FlightMap flight={selectedFlight} />
                </TabsContent>
                
                <TabsContent value="details" className="mt-4">
                  <FlightDetails flight={selectedFlight} />
                </TabsContent>
                
                <TabsContent value="price" className="mt-4">
                  <PriceTrendChart flight={selectedFlight} />
                </TabsContent>
              </Tabs>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default FlightTracker;
