// PriceTrendChart component to display price prediction data
const PriceTrendChart: React.FC = () => {
  const chartRef = React.useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (chartRef.current) {
      // In a real implementation, we would use a chart library like Chart.js or Recharts
      // For now, we'll create a simple visual representation
      const container = chartRef.current;
      container.innerHTML = '';
      
      const chartHeight = 200;
      const chartWidth = container.clientWidth;
      const maxPrice = Math.max(...priceTrendData.map(d => Math.max(d.avgPrice, d.previousYearPrice)));
      
      // Create chart container
      const chartContainer = document.createElement('div');
      chartContainer.style.position = 'relative';
      chartContainer.style.height = `${chartHeight}px`;
      chartContainer.style.width = '100%';
      chartContainer.style.display = 'flex';
      chartContainer.style.alignItems = 'flex-end';
      chartContainer.style.padding = '10px 0';
      chartContainer.style.borderBottom = '1px solid #e5e7eb';
      
      // Add month labels and bars
      priceTrendData.forEach((data, i) => {
        const barGroup = document.createElement('div');
        barGroup.style.display = 'flex';
        barGroup.style.flexDirection = 'column';
        barGroup.style.alignItems = 'center';
        barGroup.style.flex = '1';
        
        // Current year bar
        const currentBar = document.createElement('div');
        const currentHeight = (data.avgPrice / maxPrice) * chartHeight * 0.8;
        currentBar.style.width = '12px';
        currentBar.style.height = `${currentHeight}px`;
        currentBar.style.backgroundColor = '#3b82f6';
        currentBar.style.marginBottom = '2px';
        currentBar.style.borderRadius = '2px 2px 0 0';
        currentBar.title = `₹${data.avgPrice} (Current Year)`;
        
        // Previous year bar
        const prevBar = document.createElement('div');
        const prevHeight = (data.previousYearPrice / maxPrice) * chartHeight * 0.8;
        prevBar.style.width = '12px';
        prevBar.style.height = `${prevHeight}px`;
        prevBar.style.backgroundColor = '#93c5fd';
        prevBar.style.position = 'absolute';
        prevBar.style.bottom = '18px';
        prevBar.style.left = `${i * (chartWidth / priceTrendData.length) + (chartWidth / priceTrendData.length / 2) - 6}px`;
        prevBar.style.borderRadius = '2px 2px 0 0';
        prevBar.title = `₹${data.previousYearPrice} (Previous Year)`;
        
        // Month label
        const monthLabel = document.createElement('div');
        monthLabel.textContent = data.month;
        monthLabel.style.fontSize = '10px';
        monthLabel.style.marginTop = '4px';
        
        barGroup.appendChild(currentBar);
        chartContainer.appendChild(barGroup);
        chartContainer.appendChild(prevBar);
        barGroup.appendChild(monthLabel);
      });
      
      // Add legend
      const legend = document.createElement('div');
      legend.style.display = 'flex';
      legend.style.justifyContent = 'flex-end';
      legend.style.marginTop = '8px';
      legend.style.fontSize = '12px';
      
      const currentYearLegend = document.createElement('div');
      currentYearLegend.style.display = 'flex';
      currentYearLegend.style.alignItems = 'center';
      currentYearLegend.style.marginRight = '16px';
      
      const currentYearColor = document.createElement('div');
      currentYearColor.style.width = '12px';
      currentYearColor.style.height = '12px';
      currentYearColor.style.backgroundColor = '#3b82f6';
      currentYearColor.style.marginRight = '4px';
      currentYearColor.style.borderRadius = '2px';
      
      currentYearLegend.appendChild(currentYearColor);
      currentYearLegend.appendChild(document.createTextNode('Current Year'));
      
      const prevYearLegend = document.createElement('div');
      prevYearLegend.style.display = 'flex';
      prevYearLegend.style.alignItems = 'center';
      
      const prevYearColor = document.createElement('div');
      prevYearColor.style.width = '12px';
      prevYearColor.style.height = '12px';
      prevYearColor.style.backgroundColor = '#93c5fd';
      prevYearColor.style.marginRight = '4px';
      prevYearColor.style.borderRadius = '2px';
      
      prevYearLegend.appendChild(prevYearColor);
      prevYearLegend.appendChild(document.createTextNode('Previous Year'));
      
      legend.appendChild(currentYearLegend);
      legend.appendChild(prevYearLegend);
      
      container.appendChild(chartContainer);
      container.appendChild(legend);
    }
  }, []);
  
  return (
    <div>
      <h3 className="text-lg font-medium mb-2">Hotel Price Trends (Hyderabad)</h3>
      <p className="text-sm text-gray-500 mb-4">
        Average hotel pricing trends over the year based on historical data
      </p>
      <div ref={chartRef} className="h-[250px] w-full"></div>
    </div>
  );
};

interface MapWithHotelsProps {
  hotels: Hotel[];
  selectedHotel: Hotel | null;
  onHotelSelect: (hotel: Hotel) => void;
  city: string;
}

const MapWithHotels: React.FC<MapWithHotelsProps> = ({
  hotels,
  selectedHotel,
  onHotelSelect,
  city
}) => {
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [selectedMarker, setSelectedMarker] = useState<Hotel | null>(null);
  const [loading, setLoading] = useState(true);
  
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: GOOGLE_MAPS_API_KEY,
    libraries,
  });
  
  const onMapLoad = useCallback((mapInstance: google.maps.Map) => {
    setMap(mapInstance);
    setLoading(false);
  }, []);
  
  const onUnmount = useCallback(() => {
    setMap(null);
  }, []);
  
  const getMapCenter = useCallback(() => {
    // Use the city center coordinates
    return cityData[city]?.center || cityData[defaultCity].center;
  }, [city]);
  
  // Show the airport marker
  const airportMarker = cityData[city]?.airport;
  
  return (
    <>
      {isLoaded ? (
        <GoogleMap
          mapContainerStyle={mapContainerStyle}
          center={getMapCenter()}
          zoom={13}
          onLoad={onMapLoad}
          onUnmount={onUnmount}
        >
          {/* Airport marker */}
          {airportMarker && (
            <Marker
              position={airportMarker.coordinates}
              icon={{
                url: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                scaledSize: new window.google.maps.Size(32, 32),
              }}
              title={airportMarker.name}
            />
          )}
          
          {/* Hotel markers */}
          {hotels.map((hotel) => (
            <Marker
              key={hotel.id}
              position={hotel.coordinates}
              onClick={() => setSelectedMarker(hotel)}
              animation={window.google.maps.Animation.DROP}
              icon={{
                url: selectedHotel?.id === hotel.id
                  ? "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
                  : "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
                scaledSize: new window.google.maps.Size(32, 32),
              }}
              title={hotel.name}
            />
          ))}

          {/* Info window for selected hotel */}
          {selectedMarker && (
            <InfoWindow
              position={selectedMarker.coordinates}
              onCloseClick={() => setSelectedMarker(null)}
            >
              <div className="p-3 max-w-[250px]">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-base">{selectedMarker.name}</h3>
                  <div className="flex items-center">
                    <Star className="h-3 w-3 fill-yellow-400 text-yellow-400 mr-1" />
                    <span className="text-xs font-semibold">{selectedMarker.rating}</span>
                  </div>
                </div>
                
                <div className="flex items-center gap-1 text-xs mt-1">
                  <MapPin className="h-3 w-3 text-gray-500" />
                  <span className="text-xs text-gray-600">{selectedMarker.location}</span>
                </div>
                
                <div className="mt-2">
                  <p className="text-sm font-semibold text-green-600">₹{selectedMarker.pricePerNight.toLocaleString()} per night</p>
                  <p className="text-xs text-gray-500 mt-1">Room Type: {selectedMarker.roomType}</p>
                </div>
                
                <div className="mt-2 flex flex-wrap gap-1">
                  {selectedMarker.amenities.slice(0, 3).map((amenity, index) => (
                    <span key={index} className="text-xs bg-gray-100 py-1 px-2 rounded-full">{amenity}</span>
                  ))}
                  {selectedMarker.amenities.length > 3 && (
                    <span className="text-xs bg-gray-100 py-1 px-2 rounded-full">+{selectedMarker.amenities.length - 3} more</span>
                  )}
                </div>
                
                <div className="mt-2 flex items-center gap-1 border-t border-gray-100 pt-2">
                  <Plane className="h-3 w-3 text-airblue" />
                  <span className="text-xs">{selectedMarker.distance} from airport</span>
                </div>
                
                <Button 
                  size="sm" 
                  className="mt-3 w-full bg-airblue hover:bg-airblue/90" 
                  onClick={() => onHotelSelect(selectedMarker)}
                >
                  Book Now
                </Button>
              </div>
            </InfoWindow>
          )}
        </GoogleMap>
      ) : (
        <div className="flex items-center justify-center h-80 bg-gray-50 rounded-lg">
          <Loader2 className="h-10 w-10 animate-spin text-airblue" />
        </div>
      )}
    </>
  );
};

const HotelCard: React.FC<{
  hotel: Hotel;
  isSelected: boolean;
  onSelect: () => void;
}> = ({ hotel, isSelected, onSelect }) => {
  return (
    <Card
      className={cn(
        "overflow-hidden transition-colors hover:border-airblue cursor-pointer",
        isSelected ? "border-airblue" : "border-gray-200"
      )}
      onClick={onSelect}
    >
      <div className="h-[180px] bg-gray-100 relative">
        <img
          src={hotel.imageUrl}
          alt={hotel.name}
          className="h-full w-full object-cover"
        />
        <div className="absolute top-2 right-2 bg-white/90 px-2 py-1 rounded text-xs font-bold text-green-600">
          ₹{hotel.pricePerNight.toLocaleString()}/night
        </div>
      </div>
      <CardContent className="p-4">
        <div className="flex items-start justify-between">
          <div>
            <h3 className="font-semibold">{hotel.name}</h3>
            <div className="flex items-center mt-1">
              <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
              <span className="text-xs ml-1">{hotel.rating}</span>
              <span className="text-xs text-gray-500 ml-2">{hotel.location}</span>
            </div>
          </div>
        </div>
        
        <div className="mt-3 flex flex-wrap gap-1">
          {hotel.amenities.slice(0, 3).map((amenity, index) => (
            <span key={index} className="text-xs bg-gray-100 py-1 px-2 rounded-full">{amenity}</span>
          ))}
        </div>
        
        <div className="mt-4 flex items-center text-xs text-gray-500 space-x-4">
          <div className="flex items-center">
            <Plane className="h-3 w-3 mr-1 text-airblue" />
            <span>{hotel.distance}</span>
          </div>
          <div className="flex items-center">
            <Clock className="h-3 w-3 mr-1" />
            <span>{hotel.timeFromAirport} from airport</span>
          </div>
        </div>
        
        <div className="mt-3 flex items-center justify-between">
          <div className="text-xs text-gray-600">
            {hotel.roomType}
          </div>
          <Button 
            size="sm" 
            className={cn(
              "ml-2",
              isSelected ? "bg-green-600 hover:bg-green-700" : "bg-airblue hover:bg-airblue/90"
            )}
            onClick={(e) => {
              e.stopPropagation();
              onSelect();
            }}
          >
            {isSelected ? <Check className="h-4 w-4 mr-1" /> : null}
            {isSelected ? "Selected" : "Select"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
